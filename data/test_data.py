"""
测试数据文件
包含用于演示的文档和查询数据
"""

# 示例文档数据
SAMPLE_DOCUMENTS = [
    "人工智能（AI）是计算机科学的一个分支，致力于创建能够执行通常需要人类智能的任务的系统。这些任务包括学习、推理、问题解决、感知和语言理解。",
    "机器学习是人工智能的一个子集，它使计算机能够在没有明确编程的情况下学习和改进。机器学习算法通过分析数据来识别模式并做出预测。",
    "深度学习是机器学习的一个分支，使用多层神经网络来模拟人脑的学习过程。它在图像识别、自然语言处理和语音识别等领域取得了突破性进展。",
    "自然语言处理（NLP）是人工智能的一个领域，专注于使计算机能够理解、解释和生成人类语言。NLP技术被广泛应用于聊天机器人、翻译系统和文本分析工具中。",
    "计算机视觉是人工智能的一个分支，致力于使计算机能够从图像和视频中获取高级理解。它被用于面部识别、自动驾驶汽车和医疗图像分析等应用。",
    "强化学习是一种机器学习方法，其中智能体通过与环境交互来学习最优行为策略。它被用于游戏AI、机器人控制和推荐系统等领域。",
    "神经网络是受生物神经网络启发的计算模型。它们由相互连接的节点（神经元）组成，能够学习复杂的非线性关系。",
    "大数据是指无法使用传统数据处理软件有效处理的庞大、复杂的数据集。大数据分析在商业智能、科学研究和政府决策中发挥着重要作用。",
    "云计算是一种通过互联网提供计算服务的模型。它允许用户按需访问共享的计算资源，而无需拥有和管理物理基础设施。",
    "区块链是一种分布式账本技术，它允许多方在没有中央权威的情况下进行安全、透明的交易。它最著名的应用是加密货币比特币。",
    # 下面为新增的 50 条扩展文档（10 -> 59）
    "知识图谱通过实体与关系的结构化表示来组织知识，支持问答、搜索与推荐等应用。它强调可解释性与可扩展性。",
    "推荐系统利用用户行为与内容特征进行个性化推荐，常见方法包括协同过滤、内容推荐与混合模型。",
    "时间序列预测关注随时间变化的数据建模，常用方法有ARIMA、Prophet以及基于深度学习的LSTM、Transformer。",
    "联邦学习通过在本地设备上训练模型并仅汇总梯度或参数来保护隐私，有效减少数据集中化带来的风险。",
    "隐私计算技术（如差分隐私与安全多方计算）在数据分析与模型训练中提供可量化的隐私保障。",
    "AutoML自动化搜索特征工程、模型与超参数，降低机器学习使用门槛，同时提升效果与效率。",
    "MLOps将软件工程实践引入机器学习全生命周期，关注数据版本、模型部署、监控与回滚等流程化管理。",
    "图神经网络（GNN）在图结构数据上进行学习，捕获节点与边的依赖关系，应用于社交网络与分子性质预测等。",
    "迁移学习通过在源任务中学习到的表征来提升目标任务的性能，特别适用于标注数据稀缺的场景。",
    "元学习（学习如何学习）旨在让模型快速适应新任务，典型方法包括模型无关元学习（MAML）。",
    "策略梯度与Actor-Critic等强化学习方法直接优化策略或同时估计价值，提升连续控制与复杂决策的稳定性。",
    "生成对抗网络（GAN）通过生成器与判别器的对抗训练，实现高质量数据生成，广泛用于图像合成与风格迁移。",
    "变分自编码器（VAE）通过近似后验学习隐变量分布，兼顾生成质量与潜在空间的连续性与可操作性。",
    "Transformer以自注意力为核心，善于捕捉长程依赖，已经成为NLP与多模态任务的主流架构。",
    "预训练语言模型通过大规模语料无监督或自监督训练，具备强大的下游迁移能力，如BERT与GPT系列。",
    "提示工程通过设计、调优与结构化提示来引导大模型行为，提升任务表现与可控性。",
    "检索增强生成（RAG）结合外部知识检索与生成模型，显著提升事实性与可追溯性，适用于企业知识问答。",
    "文本向量化与向量检索通过嵌入表示实现语义匹配，支持相似度搜索与相关性排序。",
    "向量数据库针对高维向量的近似最近邻搜索进行优化，常见索引包括HNSW、IVF与PQ。",
    "主题模型（如LDA）用于发现文本的潜在主题分布，帮助进行文本聚类、摘要与可视化分析。",
    "半监督学习利用少量标注与大量未标注数据进行联合训练，缓解标注成本高的问题。",
    "弱监督通过规则、远程监督或噪声标注构建训练数据，在保证规模的同时兼顾可控性。",
    "主动学习通过选择性查询最有价值的样本进行标注，在有限标注预算下最大化模型效果。",
    "异常检测识别偏离常规的数据点，应用于金融风控、设备运维与网络安全等场景。",
    "特征工程关注原始数据到特征表示的构建，包括清洗、变换、选择与构造等步骤。",
    "超参数优化通过网格搜索、随机搜索与贝叶斯优化等方法系统性地提升模型性能。",
    "模型压缩与知识蒸馏通过参数共享、低秩分解与教师-学生范式减小模型体积并保持精度。",
    "量化与剪枝在推理阶段降低计算与存储开销，使模型更适合在边缘设备上部署。",
    "边缘计算将计算从云端下沉到靠近数据源的设备，降低时延并提升隐私与可靠性。",
    "物联网（IoT）连接大量传感器与设备，产生的海量数据需要流式处理与实时分析能力。",
    "流式处理框架（如Flink、Kafka Streams）支持低时延与状态管理，适用于实时监控与告警。",
    "数据质量与数据治理确保数据的准确性、一致性、完整性与可追溯性，是AI工程的基础。",
    "A/B测试与因果推断用于评估策略变化的真实效果，避免仅基于相关性的错误结论。",
    "可解释性AI（XAI）通过可视化与局部解释方法帮助理解模型决策，提升合规与信任。",
    "公平性与偏差校正聚焦于减少数据与模型中的不公平现象，促进负责任的AI落地。",
    "多模态学习融合文本、图像、语音等信息源，实现更全面的表征与推理能力。",
    "语音识别与语音合成（TTS）推动语音交互的发展，广泛应用于助手、字幕与无障碍场景。",
    "机器翻译从统计方法发展到神经网络主导，结合大规模预训练与对齐数据效果显著。",
    "信息检索（IR）通过索引与排序模型快速定位相关文档，广泛用于搜索引擎与企业检索。",
    "文本分类任务将文档映射到预定义类别，常用方法包括深度学习与预训练微调。",
    "文本生成关注连贯性、事实性与可控性，在写作助手与数据到文本等任务中应用广泛。",
    "对话系统包括任务型与开放域两类，强调上下文建模、意图识别与状态跟踪。",
    "代码生成利用大模型对编程语言的强表征能力，辅助单测生成、重构与文档补全。",
    "图像生成从GAN走向扩散模型，凭借更稳定的训练与细节刻画能力获得高质量合成效果。",
    "三维视觉与SLAM在AR/VR与机器人领域至关重要，涉及位姿估计、重建与跟踪。",
    "强化学习在推荐与广告投放中用于序列决策与长期收益优化，结合约束与可解释性尤为重要。",
    "医疗NLP助力临床文本结构化、命名实体识别与辅助诊断，需兼顾隐私与合规。",
    "金融风控利用图挖掘与时序建模识别欺诈与风险事件，强调实时性与稳定性。",
    "网络安全中的AI用于入侵检测、恶意样本识别与威胁情报分析，需要鲁棒性与低误报。",
    "自动驾驶融合感知、定位、预测与路径规划，依赖高精地图与多传感器数据，以确保安全与鲁棒性。"
]

# 示例查询数据
SAMPLE_QUERIES = [
    "什么是人工智能？",                    # 事实性查询
    "机器学习和深度学习有什么区别？",      # 比较性查询
    "自然语言处理有哪些应用？",            # 事实性查询
    "分析AI在医疗领域的影响",              # 分析性查询
    "如何设计一个智能推荐系统？"           # 创造性查询
]

# 查询类型标注
QUERY_TYPE_ANNOTATIONS = {
    "什么是人工智能？": "Factual",
    "机器学习和深度学习有什么区别？": "Comparative", 
    "自然语言处理有哪些应用？": "Factual",
    "分析AI在医疗领域的影响": "Analytical",
    "如何设计一个智能推荐系统？": "Creative"
}

# 预期相关文档（用于评估）
EXPECTED_RELEVANT_DOCS = {
    "什么是人工智能？": [0],  # 文档0最相关
    "机器学习和深度学习有什么区别？": [1, 2],  # 文档1和2最相关
    "自然语言处理有哪些应用？": [3],  # 文档3最相关
    "分析AI在医疗领域的影响": [0, 4],  # 文档0和4相关
    "如何设计一个智能推荐系统？": [5, 6]  # 文档5和6相关
}

# 语义关系映射
SEMANTIC_RELATIONS = {
    'ai': ['人工智能', '机器学习', '深度学习', '神经网络'],
    'machine': ['机器学习', '深度学习', '神经网络', '算法'],
    'learning': ['学习', '训练', '模型', '算法'],
    'neural': ['神经网络', '深度学习', '机器学习'],
    'nlp': ['自然语言处理', '语言', '文本', '翻译'],
    'vision': ['计算机视觉', '图像', '视频', '识别'],
    'data': ['数据', '大数据', '分析', '处理'],
    'cloud': ['云计算', '云服务', '分布式', '网络'],
    'blockchain': ['区块链', '分布式', '加密', '交易'],
    'reinforcement': ['强化学习', '智能体', '交互', '策略'],
    'medical': ['医疗', '健康', '诊断', '治疗'],
    'recommendation': ['推荐', '推荐系统', '个性化', '用户']
}

# 文档ID映射
DOCUMENT_IDS = [f"doc_{i}" for i in range(len(SAMPLE_DOCUMENTS))]

# 文档元数据
DOCUMENT_METADATA = [
    {"id": "doc_0", "title": "人工智能概述", "category": "AI基础", "length": len(SAMPLE_DOCUMENTS[0])},
    {"id": "doc_1", "title": "机器学习介绍", "category": "机器学习", "length": len(SAMPLE_DOCUMENTS[1])},
    {"id": "doc_2", "title": "深度学习技术", "category": "深度学习", "length": len(SAMPLE_DOCUMENTS[2])},
    {"id": "doc_3", "title": "自然语言处理", "category": "NLP", "length": len(SAMPLE_DOCUMENTS[3])},
    {"id": "doc_4", "title": "计算机视觉", "category": "计算机视觉", "length": len(SAMPLE_DOCUMENTS[4])},
    {"id": "doc_5", "title": "强化学习", "category": "强化学习", "length": len(SAMPLE_DOCUMENTS[5])},
    {"id": "doc_6", "title": "神经网络", "category": "神经网络", "length": len(SAMPLE_DOCUMENTS[6])},
    {"id": "doc_7", "title": "大数据", "category": "大数据", "length": len(SAMPLE_DOCUMENTS[7])},
    {"id": "doc_8", "title": "云计算", "category": "云计算", "length": len(SAMPLE_DOCUMENTS[8])},
    {"id": "doc_9", "title": "区块链", "category": "区块链", "length": len(SAMPLE_DOCUMENTS[9])}
] + [
    {
        "id": f"doc_{i}",
        "title": f"扩展文档_{i}",
        "category": "扩展",
        "length": len(SAMPLE_DOCUMENTS[i])
    }
    for i in range(10, len(SAMPLE_DOCUMENTS))
]

def get_test_data():
    """获取测试数据"""
    return {
        'documents': SAMPLE_DOCUMENTS,
        'queries': SAMPLE_QUERIES,
        'query_annotations': QUERY_TYPE_ANNOTATIONS,
        'expected_relevant_docs': EXPECTED_RELEVANT_DOCS,
        'semantic_relations': SEMANTIC_RELATIONS,
        'document_ids': DOCUMENT_IDS,
        'document_metadata': DOCUMENT_METADATA
    }

def get_documents():
    """获取文档数据"""
    return SAMPLE_DOCUMENTS

def get_queries():
    """获取查询数据"""
    return SAMPLE_QUERIES

def get_semantic_relations():
    """获取语义关系数据"""
    return SEMANTIC_RELATIONS 